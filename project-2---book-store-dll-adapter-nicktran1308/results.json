{
   "output": "*************************\n***** Tests Summary *****\n[Printing] 2 / 2 ==> 5 / 5\n[List basics] 15 / 15 ==> 10 / 10\n[List assignment] 7 / 7 ==> 10 / 10\n[Accordion] 6 / 6 ==> 10 / 10\n[List reverse] 3 / 3 ==> 5 / 5\n[Iterators] 10 / 10 ==> 10 / 10\n[Stock/Sales Manip] 13 / 13 ==> 10 / 10\n[Memory Leaks] 11 / 11 ==> 5 / 5\n\nRaw Total: 65 / 65 (100%)\nNormalized: 50 / 50\n",
   "score": 50,
   "stdout_visibility": "visible",
   "tests": [
      {
         "max_score": 5,
         "name": "Printing",
         "output": "[Printing][Info] Setting fixed points possible to 2\n[Printing][Info] Running: Print tests\n[Printing][Pass] Points 0 ==> 1 (1): Print tests :: Award 1 points :: Did not catch exception\n[Printing][Info] Running: Basic store printout\n[Printing][Pass] Points 1 ==> 2 (1): Basic store printout :: Award 1 points\n",
         "score": 5
      },
      {
         "max_score": 10,
         "name": "List basics",
         "output": "[List basics][Info] Setting fixed points possible to 15\n[List basics][Info] Running: Basic add/remove tests\n[List basics][Pass] Points 0 ==> 1 (1): Basic add/remove tests :: Award 1 points :: Did not catch exception\n[List basics][Info] Running: Checking assign()\n[List basics][Pass] Points 1 ==> 2 (1): Checking assign() :: Award 1 points :: Did not catch exception\n[List basics][Info] Running: Checking random access\n[List basics][Pass] Points 2 ==> 3 (1): Checking random access :: Award 1 points\n[List basics][Info] Running: Checking random access\n[List basics][Pass] Points 3 ==> 4 (1): Checking random access :: Award 1 points\n[List basics][Info] Running: Checking random access\n[List basics][Pass] Points 4 ==> 5 (1): Checking random access :: Award 1 points\n[List basics][Info] Running: Checking size\n[List basics][Pass] Points 5 ==> 6 (1): Checking size :: Award 1 points\n[List basics][Info] Running: Checking size after arbitrary insertions\n[List basics][Pass] Points 6 ==> 7 (1): Checking size after arbitrary insertions :: Award 1 points\n[List basics][Info] Running: Checking arbitrary insertion\n[List basics][Pass] Points 7 ==> 8 (1): Checking arbitrary insertion :: Award 1 points\n[List basics][Info] Running: Checking arbitrary insertion\n[List basics][Pass] Points 8 ==> 9 (1): Checking arbitrary insertion :: Award 1 points\n[List basics][Info] Running: Checking size after push front/back\n[List basics][Pass] Points 9 ==> 10 (1): Checking size after push front/back :: Award 1 points\n[List basics][Info] Running: Checking value after push front\n[List basics][Pass] Points 10 ==> 11 (1): Checking value after push front :: Award 1 points\n[List basics][Info] Running: Checking value after push back\n[List basics][Pass] Points 11 ==> 12 (1): Checking value after push back :: Award 1 points\n[List basics][Info] Running: Checking value at front()\n[List basics][Pass] Points 12 ==> 13 (1): Checking value at front() :: Award 1 points\n[List basics][Info] Running: Checking value at back()\n[List basics][Pass] Points 13 ==> 14 (1): Checking value at back() :: Award 1 points\n[List basics][Info] Running: Checking assign() method\n[List basics][Pass] Points 14 ==> 15 (1): Checking assign() method :: Award 1 points :: TRUE\n",
         "score": 10
      },
      {
         "max_score": 10,
         "name": "List assignment",
         "output": "[List assignment][Info] Setting fixed points possible to 7\n[List assignment][Info] Running: List assignment tests\n[List assignment][Pass] Points 0 ==> 1 (1): List assignment tests :: Award 1 points :: Did not catch exception\n[List assignment][Info] Running: Assignment operator should work\n[List assignment][Pass] Points 1 ==> 2 (1): Assignment operator should work :: Award 1 points :: TRUE\n[List assignment][Info] Running: Copy constructor should work\n[List assignment][Pass] Points 2 ==> 3 (1): Copy constructor should work :: Award 1 points :: TRUE\n[List assignment][Info] Running: Comparison operator check\n[List assignment][Pass] Points 3 ==> 4 (1): Comparison operator check :: Award 1 points :: TRUE\n[List assignment][Info] Running: Inequality operator check\n[List assignment][Pass] Points 4 ==> 5 (1): Inequality operator check :: Award 1 points :: FALSE\n[List assignment][Info] Running: Comparison operator check\n[List assignment][Pass] Points 5 ==> 6 (1): Comparison operator check :: Award 1 points :: FALSE\n[List assignment][Info] Running: Inequality operator check\n[List assignment][Pass] Points 6 ==> 7 (1): Inequality operator check :: Award 1 points :: TRUE\n",
         "score": 10
      },
      {
         "max_score": 10,
         "name": "Accordion",
         "output": "[Accordion][Info] Setting fixed points possible to 6\n[Accordion][Info] Running: Accordion tests\n[Accordion][Pass] Points 0 ==> 1 (1): Accordion tests :: Award 1 points :: Did not catch exception\n[Accordion][Info] Running: Check size after a bunch of push_front and push_back\n[Accordion][Pass] Points 1 ==> 2 (1): Check size after a bunch of push_front and push_back :: Award 1 points\n[Accordion][Info] Running: Check size after some pop_front and pop_back\n[Accordion][Pass] Points 2 ==> 3 (1): Check size after some pop_front and pop_back :: Award 1 points\n[Accordion][Info] Running: Check empty() after some pop_front and pop_back\n[Accordion][Pass] Points 3 ==> 4 (1): Check empty() after some pop_front and pop_back :: Award 1 points :: FALSE\n[Accordion][Info] Running: Check size after depleting with pop_front and pop_back\n[Accordion][Pass] Points 4 ==> 5 (1): Check size after depleting with pop_front and pop_back :: Award 1 points\n[Accordion][Info] Running: Check empty() after depleting with pop_front and pop_back\n[Accordion][Pass] Points 5 ==> 6 (1): Check empty() after depleting with pop_front and pop_back :: Award 1 points :: TRUE\n",
         "score": 10
      },
      {
         "max_score": 5,
         "name": "List reverse",
         "output": "[List reverse][Info] Setting fixed points possible to 3\n[List reverse][Info] Running: Reverse tests\n[List reverse][Pass] Points 0 ==> 1 (1): Reverse tests :: Award 1 points :: Did not catch exception\n[List reverse][Info] Running: Correctly reverse a list\n[List reverse][Pass] Points 1 ==> 3 (2): Correctly reverse a list :: Award 2 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 10,
         "name": "Iterators",
         "output": "[Iterators][Info] Setting fixed points possible to 10\n[Iterators][Info] Running: Iterator tests\n[Iterators][Pass] Points 0 ==> 1 (1): Iterator tests :: Award 1 points :: Did not catch exception\n[Iterators][Info] Running: Postfix iterator increment\n[Iterators][Pass] Points 1 ==> 2 (1): Postfix iterator increment :: Award 1 points\n[Iterators][Info] Running: Prefix iterator increment\n[Iterators][Pass] Points 2 ==> 3 (1): Prefix iterator increment :: Award 1 points\n[Iterators][Info] Running: Iterator addition assignment\n[Iterators][Pass] Points 3 ==> 4 (1): Iterator addition assignment :: Award 1 points\n[Iterators][Info] Running: Iterator subtraction assignment\n[Iterators][Pass] Points 4 ==> 5 (1): Iterator subtraction assignment :: Award 1 points\n[Iterators][Info] Running: Postfix iterator decrement\n[Iterators][Pass] Points 5 ==> 6 (1): Postfix iterator decrement :: Award 1 points\n[Iterators][Info] Running: Prefix iterator decrement\n[Iterators][Pass] Points 6 ==> 7 (1): Prefix iterator decrement :: Award 1 points\n[Iterators][Info] Running: Iterator assignment and comparison operators\n[Iterators][Pass] Points 7 ==> 8 (1): Iterator assignment and comparison operators :: Award 1 points :: TRUE\n[Iterators][Info] Running: Iterators should not be equal after has is advanced\n[Iterators][Pass] Points 8 ==> 9 (1): Iterators should not be equal after has is advanced :: Award 1 points :: TRUE\n[Iterators][Info] Running: Depleted iterator should become end()\n[Iterators][Pass] Points 9 ==> 10 (1): Depleted iterator should become end() :: Award 1 points :: TRUE\n",
         "score": 10
      },
      {
         "max_score": 10,
         "name": "Stock/Sales Manip",
         "output": "[Stock/Sales Manip][Info] Setting fixed points possible to 13\n[Stock/Sales Manip][Info] Running: Account balance tests\n[Stock/Sales Manip][Pass] Points 0 ==> 2 (2): Account balance tests :: Award 2 points :: Did not catch exception\n[Stock/Sales Manip][Info] Running: Should see an exception if we try to oversell a book.\n[Stock/Sales Manip][Pass] Points 2 ==> 3 (1): Should see an exception if we try to oversell a book. :: Award 1 points :: Caught exception :: Not enough stock available\n[Stock/Sales Manip][Info] Running: Correct balance after adding initial books\n[Stock/Sales Manip][Pass] Points 3 ==> 4 (1): Correct balance after adding initial books :: Award 1 points\n[Stock/Sales Manip][Info] Running: Correct balance after adding new book\n[Stock/Sales Manip][Pass] Points 4 ==> 5 (1): Correct balance after adding new book :: Award 1 points\n[Stock/Sales Manip][Info] Running: Correct stock on newly added book\n[Stock/Sales Manip][Pass] Points 5 ==> 6 (1): Correct stock on newly added book :: Award 1 points\n[Stock/Sales Manip][Info] Running: Correct balance after adding more of an existing book at a different price\n[Stock/Sales Manip][Pass] Points 6 ==> 7 (1): Correct balance after adding more of an existing book at a different price :: Award 1 points\n[Stock/Sales Manip][Info] Running: Correct stock after adding 2 more\n[Stock/Sales Manip][Pass] Points 7 ==> 8 (1): Correct stock after adding 2 more :: Award 1 points\n[Stock/Sales Manip][Info] Running: Correct balance after selling some books\n[Stock/Sales Manip][Pass] Points 8 ==> 9 (1): Correct balance after selling some books :: Award 1 points\n[Stock/Sales Manip][Info] Running: Adjust account balance\n[Stock/Sales Manip][Pass] Points 9 ==> 10 (1): Adjust account balance :: Award 1 points\n[Stock/Sales Manip][Info] Running: Adjust account balance\n[Stock/Sales Manip][Pass] Points 10 ==> 11 (1): Adjust account balance :: Award 1 points\n[Stock/Sales Manip][Info] Running: Calling bookExists() on existing book\n[Stock/Sales Manip][Pass] Points 11 ==> 12 (1): Calling bookExists() on existing book :: Award 1 points :: TRUE\n[Stock/Sales Manip][Info] Running: Calling bookExists() on non-existing book\n[Stock/Sales Manip][Pass] Points 12 ==> 13 (1): Calling bookExists() on non-existing book :: Award 1 points :: FALSE\n",
         "score": 10
      },
      {
         "max_score": 5,
         "name": "Memory Leaks",
         "output": "[Memory Leaks][Info] Setting fixed points possible to 11\n[Memory Leaks][Info] Running: Memory leaks\n[Memory Leaks][Pass] Points 0 ==> 1 (1): Memory leaks :: Award 1 points :: Did not catch exception\n[Memory Leaks][Info] Running: Checking for memory leaks: No leaks detected\n[Memory Leaks][Pass] Points 1 ==> 11 (10): Checking for memory leaks: No leaks detected :: Award 10 points :: TRUE\n",
         "score": 5
      }
   ]
}