{
   "output": "*************************\n***** Tests Summary *****\n[Stack] 14 / 14 ==> 5 / 5\n[Queue] 14 / 14 ==> 5 / 5\n[Complexity] 8 / 8 ==> 5 / 5\n[Detector] 11 / 11 ==> 5 / 5\n[Memory Leaks] 11 / 11 ==> 2 / 2\n\nRaw Total: 22 / 22 (100%)\nNormalized: 50 / 50\n",
   "score": 50,
   "stdout_visibility": "visible",
   "tests": [
      {
         "max_score": 5,
         "name": "Stack",
         "output": "[Stack][Info] Setting fixed points possible to 14\n[Stack][Info] Running: Stack size after basic push\n[Stack][Pass] Points 0 ==> 1 (1): Stack size after basic push :: Award 1 points\n[Stack][Info] Running: Stack top() after basic push\n[Stack][Pass] Points 1 ==> 2 (1): Stack top() after basic push :: Award 1 points\n[Stack][Info] Running: Stack shouldn't be empty after basic push\n[Stack][Pass] Points 2 ==> 3 (1): Stack shouldn't be empty after basic push :: Award 1 points :: FALSE\n[Stack][Info] Running: Stack size after a pop\n[Stack][Pass] Points 3 ==> 4 (1): Stack size after a pop :: Award 1 points\n[Stack][Info] Running: Stack top() after a pop\n[Stack][Pass] Points 4 ==> 5 (1): Stack top() after a pop :: Award 1 points\n[Stack][Info] Running: Stack shouldn't be empty with elements remaining\n[Stack][Pass] Points 5 ==> 6 (1): Stack shouldn't be empty with elements remaining :: Award 1 points :: FALSE\n[Stack][Info] Running: Stack should be empty with no elements remaining\n[Stack][Pass] Points 6 ==> 7 (1): Stack should be empty with no elements remaining :: Award 1 points :: TRUE\n[Stack][Info] Running: Checking stack top value after a push\n[Stack][Pass] Points 7 ==> 7 (0): Checking stack top value after a push :: Award 0 points\n[Stack][Info] Running: Checking stack top value after two pushes\n[Stack][Pass] Points 7 ==> 7 (0): Checking stack top value after two pushes :: Award 0 points\n[Stack][Info] Running: Checking stack top value after five pushes\n[Stack][Pass] Points 7 ==> 7 (0): Checking stack top value after five pushes :: Award 0 points\n[Stack][Info] Running: Stack should be empty after call to clear()\n[Stack][Pass] Points 7 ==> 8 (1): Stack should be empty after call to clear() :: Award 1 points :: TRUE\n[Stack][Info] Running: Checking top of stack with strings\n[Stack][Pass] Points 8 ==> 8 (0): Checking top of stack with strings :: Award 0 points\n[Stack][Info] Running: Checking top of stack with strings\n[Stack][Pass] Points 8 ==> 8 (0): Checking top of stack with strings :: Award 0 points\n[Stack][Info] Running: Stack should be empty after clear (strings)\n[Stack][Pass] Points 8 ==> 9 (1): Stack should be empty after clear (strings) :: Award 1 points :: TRUE\n[Stack][Info] Running: Attempting to pop an empty stack should throw an exception\n[Stack][Pass] Points 9 ==> 10 (1): Attempting to pop an empty stack should throw an exception :: Award 1 points :: Caught exception :: Empty stack\n[Stack][Info] Running: Attempting to get the top element of an empty stack should throw an exception\n[Stack][Pass] Points 10 ==> 11 (1): Attempting to get the top element of an empty stack should throw an exception :: Award 1 points :: Caught exception :: Empty stack\n[Stack][Info] Running: Stack assignment operator and copy CTOR\n[Stack][Pass] Points 11 ==> 12 (1): Stack assignment operator and copy CTOR :: Award 1 points :: Did not catch exception\n[Stack][Info] Running: Checking stack copy CTOR\n[Stack][Pass] Points 12 ==> 13 (1): Checking stack copy CTOR :: Award 1 points :: TRUE\n[Stack][Info] Running: Checking stack assignment operator\n[Stack][Pass] Points 13 ==> 14 (1): Checking stack assignment operator :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Queue",
         "output": "[Queue][Info] Setting fixed points possible to 14\n[Queue][Info] Running: Queue size after basic enqueue\n[Queue][Pass] Points 0 ==> 1 (1): Queue size after basic enqueue :: Award 1 points\n[Queue][Info] Running: Queue front() after basic enqueue\n[Queue][Pass] Points 1 ==> 2 (1): Queue front() after basic enqueue :: Award 1 points\n[Queue][Info] Running: Queue shouldn't be empty after basic enqueue\n[Queue][Pass] Points 2 ==> 3 (1): Queue shouldn't be empty after basic enqueue :: Award 1 points :: FALSE\n[Queue][Info] Running: Queue size after a dequeue\n[Queue][Pass] Points 3 ==> 4 (1): Queue size after a dequeue :: Award 1 points\n[Queue][Info] Running: Queue front() after a dequeue\n[Queue][Pass] Points 4 ==> 5 (1): Queue front() after a dequeue :: Award 1 points\n[Queue][Info] Running: Queue shouldn't be empty with elements remaining\n[Queue][Pass] Points 5 ==> 6 (1): Queue shouldn't be empty with elements remaining :: Award 1 points :: FALSE\n[Queue][Info] Running: Queue should be empty with no elements remaining\n[Queue][Pass] Points 6 ==> 7 (1): Queue should be empty with no elements remaining :: Award 1 points :: TRUE\n[Queue][Info] Running: Checking Queue front value after one enqueue\n[Queue][Pass] Points 7 ==> 7 (0): Checking Queue front value after one enqueue :: Award 0 points\n[Queue][Info] Running: Checking Queue front value after two enqueues\n[Queue][Pass] Points 7 ==> 7 (0): Checking Queue front value after two enqueues :: Award 0 points\n[Queue][Info] Running: Checking Queue front value after five enqueues\n[Queue][Pass] Points 7 ==> 7 (0): Checking Queue front value after five enqueues :: Award 0 points\n[Queue][Info] Running: Checking Queue front value after five enqueues and a dequeue\n[Queue][Pass] Points 7 ==> 7 (0): Checking Queue front value after five enqueues and a dequeue :: Award 0 points\n[Queue][Info] Running: Queue should be empty after call to clear()\n[Queue][Pass] Points 7 ==> 8 (1): Queue should be empty after call to clear() :: Award 1 points :: TRUE\n[Queue][Info] Running: Checking top of queue with strings\n[Queue][Pass] Points 8 ==> 8 (0): Checking top of queue with strings :: Award 0 points\n[Queue][Info] Running: Checking top of queue with strings\n[Queue][Pass] Points 8 ==> 8 (0): Checking top of queue with strings :: Award 0 points\n[Queue][Info] Running: Queue should be empty after dequeuing last item (strings)\n[Queue][Pass] Points 8 ==> 9 (1): Queue should be empty after dequeuing last item (strings) :: Award 1 points :: TRUE\n[Queue][Info] Running: Attempting to dequeue an empty queue should throw an exception\n[Queue][Pass] Points 9 ==> 10 (1): Attempting to dequeue an empty queue should throw an exception :: Award 1 points :: Caught exception :: Queue empty\n[Queue][Info] Running: Attempting to get the front element of an empty queue should throw an exception\n[Queue][Pass] Points 10 ==> 11 (1): Attempting to get the front element of an empty queue should throw an exception :: Award 1 points :: Caught exception :: Queue empty\n[Queue][Info] Running: Check queue size after lots of enqueuing\n[Queue][Pass] Points 11 ==> 11 (0): Check queue size after lots of enqueuing :: Award 0 points\n[Queue][Info] Running: Queue assignment operator and copy CTOR\n[Queue][Pass] Points 11 ==> 12 (1): Queue assignment operator and copy CTOR :: Award 1 points :: Did not catch exception\n[Queue][Info] Running: Checking queue copy CTOR\n[Queue][Pass] Points 12 ==> 13 (1): Checking queue copy CTOR :: Award 1 points :: TRUE\n[Queue][Info] Running: Checking queue assignment operator\n[Queue][Pass] Points 13 ==> 14 (1): Checking queue assignment operator :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Complexity",
         "output": "[Complexity][Info] Setting fixed points possible to 8\n[Complexity][Info] Running: Check stack size after 100 pushes\n[Complexity][Pass] Points 0 ==> 0 (0): Check stack size after 100 pushes :: Award 0 points\n[Complexity][Info] Running: Check stack size after 10000 pushes\n[Complexity][Pass] Points 0 ==> 0 (0): Check stack size after 10000 pushes :: Award 0 points\n[Complexity][Info] Running: Stack push should be O(1)\n[Complexity][Pass] Points 0 ==> 2 (2): Stack push should be O(1) :: Award 2 points :: TRUE\n[Complexity][Info] Running: Stack pop should be O(1)\n[Complexity][Pass] Points 2 ==> 4 (2): Stack pop should be O(1) :: Award 2 points :: TRUE\n[Complexity][Info] Running: Check queue size after 100 enqueues\n[Complexity][Pass] Points 4 ==> 4 (0): Check queue size after 100 enqueues :: Award 0 points\n[Complexity][Info] Running: Check queue size after 10000 enqueues\n[Complexity][Pass] Points 4 ==> 4 (0): Check queue size after 10000 enqueues :: Award 0 points\n[Complexity][Info] Running: Queue enqueue should be O(1)\n[Complexity][Pass] Points 4 ==> 6 (2): Queue enqueue should be O(1) :: Award 2 points :: TRUE\n[Complexity][Info] Running: Queue dequeue should be O(1)\n[Complexity][Pass] Points 6 ==> 8 (2): Queue dequeue should be O(1) :: Award 2 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Detector",
         "output": "[Detector][Info] Setting fixed points possible to 11\n[Detector][Info] Running: Checking the palindrome detector\n[Detector][Info] Using ruiner string: msmg\n[Detector][Info] Testing preset palindrome type: simple\n[Detector][Info] Testing \"never odd or even\" and \"never odd or evmsmgen\"\n[Detector][Info] Testing \"a nut for a jar of tuna\" and \"a nut for a jar omsmgf tuna\"\n[Detector][Info] Testing preset palindrome type: case\n[Detector][Info] Testing \"Taco Cat\" and \"Tamsmgco Cat\"\n[Detector][Info] Testing \"Oozy Rat in a Sanitary Zoo\" and \"Oozy Rmsmgat in a Sanitary Zoo\"\n[Detector][Info] Testing preset palindrome type: complex\n[Detector][Info] Testing \"Was it a car or a cat I saw?\" and \"Was it a car or a cat msmgI saw?\"\n[Detector][Info] Testing \"Yo, banana boy!\" and \"Yo, bananamsmg boy!\"\n[Detector][Pass] Points 0 ==> 1 (1): Checking the palindrome detector :: Award 1 points :: Did not catch exception\n[Detector][Info] Running: Successfully detected preset palindromes\n[Detector][Pass] Points 1 ==> 6 (5): Successfully detected preset palindromes :: Award 5 points :: TRUE\n[Detector][Info] Running: Detect random palindromes\n[Detector][Pass] Points 6 ==> 11 (5): Detect random palindromes :: Award 5 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 2,
         "name": "Memory Leaks",
         "output": "[Memory Leaks][Info] Setting fixed points possible to 11\n[Memory Leaks][Info] Running: Memory leaks\n[Memory Leaks][Pass] Points 0 ==> 1 (1): Memory leaks :: Award 1 points :: Did not catch exception\n[Memory Leaks][Info] Running: Checking for memory leaks: No leaks detected\n[Memory Leaks][Pass] Points 1 ==> 11 (10): Checking for memory leaks: No leaks detected :: Award 10 points :: TRUE\n",
         "score": 2
      }
   ]
}