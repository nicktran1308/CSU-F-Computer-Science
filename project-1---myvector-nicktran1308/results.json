{
   "output": "*************************\n***** Tests Summary *****\n[Free point test(s)] 1 / 1\n[PushBack tests] 9 / 9 ==> 5 / 5\n[Grow/Shrink tests] 14 / 14 ==> 10 / 10\n[Range tests] 22 / 22 ==> 5 / 5\n[Capacity tests] 5 / 5 ==> 5 / 5\n[Deletion tests] 8 / 8 ==> 5 / 5\n[Copy tests] 7 / 7 ==> 5 / 5\n[Destructor tests] 3 / 3 ==> 5 / 5\n[Empty tests] 5 / 5 ==> 5 / 5\n[Pointer Stealing] 11 / 11 ==> 5 / 5\n[Memory Leaks] 11 / 11 ==> 5 / 5\n\nRaw Total: 56 / 56 (100%)\nNormalized: 50 / 50\n",
   "score": 50,
   "stdout_visibility": "visible",
   "tests": [
      {
         "max_score": 1,
         "name": "Free point test(s)",
         "output": "[Free point test(s)][Info] Setting fixed points possible to 1\n[Free point test(s)][Info] Running: Free point for trying.\n[Free point test(s)][Pass] Points 0 ==> 1 (1): Free point for trying. :: Award 1 points :: TRUE\n",
         "score": 1
      },
      {
         "max_score": 5,
         "name": "PushBack tests",
         "output": "[PushBack tests][Info] Setting fixed points possible to 9\n[PushBack tests][Info] Running: First half of push_back tests\n[PushBack tests][Pass] Points 0 ==> 1 (1): First half of push_back tests :: Award 1 points :: Did not catch exception\n[PushBack tests][Info] Running: Second half of push_back tests\n[PushBack tests][Pass] Points 1 ==> 2 (1): Second half of push_back tests :: Award 1 points :: Did not catch exception\n[PushBack tests][Info] Running: Size should be 500 after push_back 500 elements.\n[PushBack tests][Pass] Points 2 ==> 3 (1): Size should be 500 after push_back 500 elements. :: Award 1 points\n[PushBack tests][Info] Running: Check capacity\n[PushBack tests][Pass] Points 3 ==> 4 (1): Check capacity :: Award 1 points\n[PushBack tests][Info] Running: Check capacity\n[PushBack tests][Pass] Points 4 ==> 5 (1): Check capacity :: Award 1 points\n[PushBack tests][Info] Running: Check capacity\n[PushBack tests][Pass] Points 5 ==> 6 (1): Check capacity :: Award 1 points\n[PushBack tests][Info] Running: Size should be 513 after additional pushes\n[PushBack tests][Pass] Points 6 ==> 7 (1): Size should be 513 after additional pushes :: Award 1 points\n[PushBack tests][Info] Running: Size should be 1100 after push_back 1100 elements.\n[PushBack tests][Pass] Points 7 ==> 8 (1): Size should be 1100 after push_back 1100 elements. :: Award 1 points\n[PushBack tests][Info] Running: Capacity should be 2048 after pushing back 110 elements.\n[PushBack tests][Pass] Points 8 ==> 9 (1): Capacity should be 2048 after pushing back 110 elements. :: Award 1 points\n",
         "score": 5
      },
      {
         "max_score": 10,
         "name": "Grow/Shrink tests",
         "output": "[Grow/Shrink tests][Info] Setting fixed points possible to 14\n[Grow/Shrink tests][Info] Running: Shrink tests\n[Grow/Shrink tests][Pass] Points 0 ==> 1 (1): Shrink tests :: Award 1 points :: Did not catch exception\n[Grow/Shrink tests][Info] Running: Size should be 0 initially.\n[Grow/Shrink tests][Pass] Points 1 ==> 2 (1): Size should be 0 initially. :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check initial capacity.\n[Grow/Shrink tests][Pass] Points 2 ==> 3 (1): Check initial capacity. :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity.\n[Grow/Shrink tests][Pass] Points 3 ==> 4 (1): Check edge-case capacity. :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity.\n[Grow/Shrink tests][Pass] Points 4 ==> 5 (1): Check edge-case capacity. :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity.\n[Grow/Shrink tests][Pass] Points 5 ==> 6 (1): Check edge-case capacity. :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity.\n[Grow/Shrink tests][Pass] Points 6 ==> 7 (1): Check edge-case capacity. :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity at size 683 (shrink).\n[Grow/Shrink tests][Pass] Points 7 ==> 8 (1): Check edge-case capacity at size 683 (shrink). :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity at size 682 (shrink).\n[Grow/Shrink tests][Pass] Points 8 ==> 9 (1): Check edge-case capacity at size 682 (shrink). :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity at size 681 (shrink).\n[Grow/Shrink tests][Pass] Points 9 ==> 10 (1): Check edge-case capacity at size 681 (shrink). :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity.\n[Grow/Shrink tests][Pass] Points 10 ==> 11 (1): Check edge-case capacity. :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity (shrink).\n[Grow/Shrink tests][Pass] Points 11 ==> 12 (1): Check edge-case capacity (shrink). :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity (shrink).\n[Grow/Shrink tests][Pass] Points 12 ==> 13 (1): Check edge-case capacity (shrink). :: Award 1 points\n[Grow/Shrink tests][Info] Running: Check edge-case capacity (shrink).\n[Grow/Shrink tests][Pass] Points 13 ==> 14 (1): Check edge-case capacity (shrink). :: Award 1 points\n",
         "score": 10
      },
      {
         "max_score": 5,
         "name": "Range tests",
         "output": "[Range tests][Info] Setting fixed points possible to 22\n[Range tests][Info] Running: Grab invalid index\n[Range tests][Pass] Points 0 ==> 1 (1): Grab invalid index :: Award 1 points :: Caught exception :: \n[Range tests][Info] Running: Grab invalid index\n[Range tests][Pass] Points 1 ==> 2 (1): Grab invalid index :: Award 1 points :: Caught exception :: \n[Range tests][Info] Running: Grab some values\n[Range tests][Pass] Points 2 ==> 3 (1): Grab some values :: Award 1 points :: Did not catch exception\n[Range tests][Info] Running: Insert at invalid index\n[Range tests][Pass] Points 3 ==> 4 (1): Insert at invalid index :: Award 1 points :: Caught exception :: \n[Range tests][Info] Running: Insert at invalid index 101\n[Range tests][Pass] Points 4 ==> 5 (1): Insert at invalid index 101 :: Award 1 points :: Caught exception :: \n[Range tests][Info] Running: Grab invalid index\n[Range tests][Pass] Points 5 ==> 6 (1): Grab invalid index :: Award 1 points :: Did not catch exception\n[Range tests][Info] Running: Check access operator\n[Range tests][Pass] Points 6 ==> 7 (1): Check access operator :: Award 1 points :: Did not catch exception\n[Range tests][Info] Running: Check access operator throws for index -1\n[Range tests][Pass] Points 7 ==> 8 (1): Check access operator throws for index -1 :: Award 1 points :: Caught exception :: \n[Range tests][Info] Running: Check access operator throws for index 100\n[Range tests][Pass] Points 8 ==> 9 (1): Check access operator throws for index 100 :: Award 1 points :: Caught exception :: \n[Range tests][Info] Running: Valid pop_back operations shouldn't throw an exception\n[Range tests][Pass] Points 9 ==> 10 (1): Valid pop_back operations shouldn't throw an exception :: Award 1 points :: Did not catch exception\n[Range tests][Info] Running: Pop back should throw on an empty vector\n[Range tests][Pass] Points 10 ==> 11 (1): Pop back should throw on an empty vector :: Award 1 points :: Caught exception :: \n[Range tests][Info] Running: Check for correct number at index 0\n[Range tests][Pass] Points 11 ==> 12 (1): Check for correct number at index 0 :: Award 1 points\n[Range tests][Info] Running: Check for correct number at index 35\n[Range tests][Pass] Points 12 ==> 13 (1): Check for correct number at index 35 :: Award 1 points\n[Range tests][Info] Running: Check for correct number at index 99\n[Range tests][Pass] Points 13 ==> 14 (1): Check for correct number at index 99 :: Award 1 points\n[Range tests][Info] Running: Check for correct number at index 76\n[Range tests][Pass] Points 14 ==> 15 (1): Check for correct number at index 76 :: Award 1 points\n[Range tests][Info] Running: Check for correct number at index 77\n[Range tests][Pass] Points 15 ==> 16 (1): Check for correct number at index 77 :: Award 1 points\n[Range tests][Info] Running: Check for correct number at index 78\n[Range tests][Pass] Points 16 ==> 17 (1): Check for correct number at index 78 :: Award 1 points\n[Range tests][Info] Running: Check access operator [] at index 1\n[Range tests][Pass] Points 17 ==> 18 (1): Check access operator [] at index 1 :: Award 1 points\n[Range tests][Info] Running: Check access operator [] at index 27\n[Range tests][Pass] Points 18 ==> 19 (1): Check access operator [] at index 27 :: Award 1 points\n[Range tests][Info] Running: Check access operator [] at index 97\n[Range tests][Pass] Points 19 ==> 20 (1): Check access operator [] at index 97 :: Award 1 points\n[Range tests][Info] Running: Single-element vector should become empty after pop_back\n[Range tests][Pass] Points 20 ==> 21 (1): Single-element vector should become empty after pop_back :: Award 1 points :: TRUE\n[Range tests][Info] Running: Checking pop_back logic\n[Range tests][Pass] Points 21 ==> 22 (1): Checking pop_back logic :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Capacity tests",
         "output": "[Capacity tests][Info] Setting fixed points possible to 5\n[Capacity tests][Info] Running: Capacity tests\n[Capacity tests][Pass] Points 0 ==> 1 (1): Capacity tests :: Award 1 points :: Did not catch exception\n[Capacity tests][Info] Running: Capacity should match new 2000 value\n[Capacity tests][Pass] Points 1 ==> 2 (1): Capacity should match new 2000 value :: Award 1 points\n[Capacity tests][Info] Running: reserve() shouldn't have corrupted vector data\n[Capacity tests][Pass] Points 2 ==> 4 (2): reserve() shouldn't have corrupted vector data :: Award 2 points :: TRUE\n[Capacity tests][Info] Running: reserve() requests should not result in less capacity than already held\n[Capacity tests][Pass] Points 4 ==> 5 (1): reserve() requests should not result in less capacity than already held :: Award 1 points\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Deletion tests",
         "output": "[Deletion tests][Info] Setting fixed points possible to 8\n[Deletion tests][Info] Running: First half of deletion tests\n[Deletion tests][Pass] Points 0 ==> 1 (1): First half of deletion tests :: Award 1 points :: Did not catch exception\n[Deletion tests][Info] Running: Erasing 2 elements from a 1 element vector should throw exception\n[Deletion tests][Pass] Points 1 ==> 2 (1): Erasing 2 elements from a 1 element vector should throw exception :: Award 1 points :: Caught exception :: \n[Deletion tests][Info] Running: Erase an element in the middle (size)\n[Deletion tests][Pass] Points 2 ==> 3 (1): Erase an element in the middle (size) :: Award 1 points :: TRUE\n[Deletion tests][Info] Running: Erase an element in the middle (capacity)\n[Deletion tests][Pass] Points 3 ==> 4 (1): Erase an element in the middle (capacity) :: Award 1 points :: TRUE\n[Deletion tests][Info] Running: Erase an element in the middle (check another element)\n[Deletion tests][Pass] Points 4 ==> 5 (1): Erase an element in the middle (check another element) :: Award 1 points\n[Deletion tests][Info] Running: Erase first element (size)\n[Deletion tests][Pass] Points 5 ==> 6 (1): Erase first element (size) :: Award 1 points :: TRUE\n[Deletion tests][Info] Running: Erase first element (capacity)\n[Deletion tests][Pass] Points 6 ==> 7 (1): Erase first element (capacity) :: Award 1 points :: TRUE\n[Deletion tests][Info] Running: Erase first element (check another element)\n[Deletion tests][Pass] Points 7 ==> 8 (1): Erase first element (check another element) :: Award 1 points\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Copy tests",
         "output": "[Copy tests][Info] Setting fixed points possible to 7\n[Copy tests][Info] Running: Copy tests\n[Copy tests][Pass] Points 0 ==> 1 (1): Copy tests :: Award 1 points :: Did not catch exception\n[Copy tests][Info] Running: Assignment operator (equality check)\n[Copy tests][Pass] Points 1 ==> 2 (1): Assignment operator (equality check) :: Award 1 points :: TRUE\n[Copy tests][Info] Running: Assignment operator (size)\n[Copy tests][Pass] Points 2 ==> 3 (1): Assignment operator (size) :: Award 1 points :: TRUE\n[Copy tests][Info] Running: Assignment operator (size)\n[Copy tests][Pass] Points 3 ==> 4 (1): Assignment operator (size) :: Award 1 points :: TRUE\n[Copy tests][Info] Running: Copy constructor (equality check)\n[Copy tests][Pass] Points 4 ==> 5 (1): Copy constructor (equality check) :: Award 1 points :: TRUE\n[Copy tests][Info] Running: Copy constructor (size)\n[Copy tests][Pass] Points 5 ==> 6 (1): Copy constructor (size) :: Award 1 points :: TRUE\n[Copy tests][Info] Running: Copy constructor (size)\n[Copy tests][Pass] Points 6 ==> 7 (1): Copy constructor (size) :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Destructor tests",
         "output": "[Destructor tests][Info] Setting fixed points possible to 3\n[Destructor tests][Info] Running: Vector should call element destructors when clear()ing\n[Destructor tests][Pass] Points 0 ==> 1 (1): Vector should call element destructors when clear()ing :: Award 1 points :: Caught exception :: Unknown exception type\n[Destructor tests][Info] Running: Vector should call element destructors when erasing()ing\n[Destructor tests][Pass] Points 1 ==> 2 (1): Vector should call element destructors when erasing()ing :: Award 1 points :: Caught exception :: Unknown exception type\n[Destructor tests][Info] Running: Vector should call element destructors when set()ing\n[Destructor tests][Pass] Points 2 ==> 3 (1): Vector should call element destructors when set()ing :: Award 1 points :: Caught exception :: Unknown exception type\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Empty tests",
         "output": "[Empty tests][Info] Setting fixed points possible to 5\n[Empty tests][Info] Running: Empty tests\n[Empty tests][Pass] Points 0 ==> 1 (1): Empty tests :: Award 1 points :: Did not catch exception\n[Empty tests][Info] Running: empty() should work with empty vector\n[Empty tests][Pass] Points 1 ==> 2 (1): empty() should work with empty vector :: Award 1 points :: TRUE\n[Empty tests][Info] Running: empty() should not work with non-empty vector\n[Empty tests][Pass] Points 2 ==> 3 (1): empty() should not work with non-empty vector :: Award 1 points :: FALSE\n[Empty tests][Info] Running: empty() should work with empty vector (again)\n[Empty tests][Pass] Points 3 ==> 4 (1): empty() should work with empty vector (again) :: Award 1 points :: TRUE\n[Empty tests][Info] Running: empty() should work with empty vector (again)\n[Empty tests][Pass] Points 4 ==> 5 (1): empty() should work with empty vector (again) :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Pointer Stealing",
         "output": "[Pointer Stealing][Info] Setting fixed points possible to 11\n[Pointer Stealing][Info] Running: Memory leaks\n[Pointer Stealing][Pass] Points 0 ==> 1 (1): Memory leaks :: Award 1 points :: Did not catch exception\n[Pointer Stealing][Info] Running: Checking for copying that engages in pointer-stealing\n[Pointer Stealing][Pass] Points 1 ==> 11 (10): Checking for copying that engages in pointer-stealing :: Award 10 points :: FALSE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Memory Leaks",
         "output": "[Memory Leaks][Info] Setting fixed points possible to 11\n[Memory Leaks][Info] Running: Memory leaks\n[Memory Leaks][Pass] Points 0 ==> 1 (1): Memory leaks :: Award 1 points :: Did not catch exception\n[Memory Leaks][Info] Running: Checking for memory leaks: No leaks detected\n[Memory Leaks][Pass] Points 1 ==> 11 (10): Checking for memory leaks: No leaks detected :: Award 10 points :: TRUE\n",
         "score": 5
      }
   ]
}