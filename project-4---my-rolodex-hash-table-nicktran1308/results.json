{
   "leaderboard": [
      {
         "name": "collisions",
         "order": "asc",
         "value": 38516.0
      }
   ],
   "output": "*************************\n***** Tests Summary *****\n[Hashing] 10 / 10 ==> 5 / 5\n[Copy/Assignment] 3 / 3 ==> 5 / 5\n[Table Manip] 23 / 23 ==> 5 / 5\n[Complexity] 4 / 4 ==> 5 / 5\n[Rolodex] 5 / 5 ==> 5 / 5\n[Memory Leaks] 11 / 11 ==> 5 / 5\n[Leaderboard] 1 / 1 ==> 1 / 1\n\nRaw Total: 31 / 31 (100%)\nNormalized: 50 / 50\n",
   "score": 50,
   "stdout_visibility": "visible",
   "tests": [
      {
         "max_score": 5,
         "name": "Hashing",
         "output": "[Hashing][Info] Setting fixed points possible to 10\n[Hashing][Info] Checking midSquare hash stays in-bounds\n[Hashing][Info] Checking midSquare hash produces corect results\n[Hashing][Info] Checking that custom hash functions produce in-bounds codes.\n[Hashing][Info] Running: Modified midSquare hash code bounds-checks were successful\n[Hashing][Pass] Points 0 ==> 2 (2): Modified midSquare hash code bounds-checks were successful :: Award 2 points :: TRUE\n[Hashing][Info] Running: Modified midSquare hash code output tests passed\n[Hashing][Pass] Points 2 ==> 7 (5): Modified midSquare hash code output tests passed :: Award 5 points :: TRUE\n[Hashing][Info] Running: Custom hash code bounds-checks were successful\n[Hashing][Pass] Points 7 ==> 9 (2): Custom hash code bounds-checks were successful :: Award 2 points :: TRUE\n[Hashing][Info] Running: Extra point for not trying to hack the Leaderboard\n[Hashing][Pass] Points 9 ==> 10 (1): Extra point for not trying to hack the Leaderboard :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Copy/Assignment",
         "output": "[Copy/Assignment][Info] Setting fixed points possible to 3\n[Copy/Assignment][Info] Running: Hash Table Copy CTOR and Assignment Operator\n[Copy/Assignment][Pass] Points 0 ==> 1 (1): Hash Table Copy CTOR and Assignment Operator :: Award 1 points :: Did not catch exception\n[Copy/Assignment][Info] Running: Check hash table assignment operator\n[Copy/Assignment][Pass] Points 1 ==> 2 (1): Check hash table assignment operator :: Award 1 points :: TRUE\n[Copy/Assignment][Info] Running: Check hash table copy CTOR\n[Copy/Assignment][Pass] Points 2 ==> 3 (1): Check hash table copy CTOR :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Table Manip",
         "output": "[Table Manip][Info] Setting fixed points possible to 23\n[Table Manip][Info] Filling table 1 (10000000) with 102774 words...\n[Table Manip][Info] Filling table 2 (1000000) with 102774 words...\n[Table Manip][Info] Filling table 3 (1000) with 102774 words...\n[Table Manip][Info] Checking collisions on a table of capacity=1\n[Table Manip][Info] Clearing a table item by item\n[Table Manip][Info] Clearing the rest of the table instantly with clear()\n[Table Manip][Info] Running: Checking correct capacity hash table\n[Table Manip][Pass] Points 0 ==> 1 (1): Checking correct capacity hash table :: Award 1 points\n[Table Manip][Info] Running: Checking correct size of hash table after adding dictionary\n[Table Manip][Pass] Points 1 ==> 2 (1): Checking correct size of hash table after adding dictionary :: Award 1 points\n[Table Manip][Info] Running: Checking correct number of collisions in hash table (capacity 10000000) after adding dictionary\n[Table Manip][Pass] Points 2 ==> 3 (1): Checking correct number of collisions in hash table (capacity 10000000) after adding dictionary :: Award 1 points\n[Table Manip][Info] Running: Checking correct number of collisions in hash table (capacity 1000000) after adding dictionary\n[Table Manip][Pass] Points 3 ==> 4 (1): Checking correct number of collisions in hash table (capacity 1000000) after adding dictionary :: Award 1 points\n[Table Manip][Info] Running: Checking correct number of collisions in hash table (capacity 1000) after adding dictionary\n[Table Manip][Pass] Points 4 ==> 5 (1): Checking correct number of collisions in hash table (capacity 1000) after adding dictionary :: Award 1 points\n[Table Manip][Info] Running: Add/exist/get/remove tests seem to have passed\n[Table Manip][Pass] Points 5 ==> 10 (5): Add/exist/get/remove tests seem to have passed :: Award 5 points :: TRUE\n[Table Manip][Info] Running: Table of capacity=1 should be nothing but collisions\n[Table Manip][Pass] Points 10 ==> 11 (1): Table of capacity=1 should be nothing but collisions :: Award 1 points\n[Table Manip][Info] Running: Check size changes as table is progressively emptied\n[Table Manip][Pass] Points 11 ==> 12 (1): Check size changes as table is progressively emptied :: Award 1 points :: TRUE\n[Table Manip][Info] Running: Table should be empty() after clearing\n[Table Manip][Pass] Points 12 ==> 13 (1): Table should be empty() after clearing :: Award 1 points :: TRUE\n[Table Manip][Info] Running: Attempting to add an existing key should throw an exception\n[Table Manip][Pass] Points 13 ==> 14 (1): Attempting to add an existing key should throw an exception :: Award 1 points :: Caught exception :: Cannot add key because it already exists: hello\n[Table Manip][Info] Running: Attempting to remove key that doesn't exist should throw an exception\n[Table Manip][Pass] Points 14 ==> 15 (1): Attempting to remove key that doesn't exist should throw an exception :: Award 1 points :: Caught exception :: Cannot remove key because it does not exist: Does not exist\n[Table Manip][Info] Running: Attempting to get value for key that doesn't exist should throw an exception\n[Table Manip][Pass] Points 15 ==> 16 (1): Attempting to get value for key that doesn't exist should throw an exception :: Award 1 points :: Caught exception :: Cannot get key because it does not exist: Does not exist\n[Table Manip][Info] Running: Table of capacity 1000000 should have resulted in 10325 collisions\n[Table Manip][Pass] Points 16 ==> 16 (0): Table of capacity 1000000 should have resulted in 10325 collisions :: Award 0 points\n[Table Manip][Info] Running: Check that capacity was actually modified\n[Table Manip][Pass] Points 16 ==> 16 (0): Check that capacity was actually modified :: Award 0 points\n[Table Manip][Info] Running: Table of capacity 100000 should have resulted in 40673 collisions\n[Table Manip][Pass] Points 16 ==> 17 (1): Table of capacity 100000 should have resulted in 40673 collisions :: Award 1 points\n[Table Manip][Info] Running: Table resize seems to be working (n_collisions).\n[Table Manip][Pass] Points 17 ==> 20 (3): Table resize seems to be working (n_collisions). :: Award 3 points :: TRUE\n[Table Manip][Info] Running: Table resize seems to be working (data survival).\n[Table Manip][Pass] Points 20 ==> 23 (3): Table resize seems to be working (data survival). :: Award 3 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Complexity",
         "output": "[Complexity][Info] Setting fixed points possible to 4\n[Complexity][Info] Time for timer1: 60200; Time for timer2: 54184\n[Complexity][Info] Time for timer3: 53214; Time for timer4: 48390\n[Complexity][Info] Running: Larger table (less collisions) should be much faster to populate than a smaller table (more collisions). Larger table took 64.625000ms while smaller table took 1332.298000ms. Collisions = 40673 vs. 102674. Factor = 20.615830\n[Complexity][Pass] Points 0 ==> 1 (1): Larger table (less collisions) should be much faster to populate than a smaller table (more collisions). Larger table took 64.625000ms while smaller table took 1332.298000ms. Collisions = 40673 vs. 102674. Factor = 20.615830 :: Award 1 points :: TRUE\n[Complexity][Info] Running: Larger table (less collisions) should be much faster to access than a smaller table (more collisions)\n[Complexity][Pass] Points 1 ==> 2 (1): Larger table (less collisions) should be much faster to access than a smaller table (more collisions) :: Award 1 points :: TRUE\n[Complexity][Info] Running: Add/Insert to a large-enough table should be about constant time\n[Complexity][Pass] Points 2 ==> 3 (1): Add/Insert to a large-enough table should be about constant time :: Award 1 points :: TRUE\n[Complexity][Info] Running: Access with a large-enough table should be about constant time\n[Complexity][Pass] Points 3 ==> 4 (1): Access with a large-enough table should be about constant time :: Award 1 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Rolodex",
         "output": "[Rolodex][Info] Setting fixed points possible to 5\n[Rolodex][Info] Running: Add to the Rolodex\n[Rolodex][Pass] Points 0 ==> 1 (1): Add to the Rolodex :: Award 1 points :: Did not catch exception\n[Rolodex][Info] Running: Check stuff after add\n[Rolodex][Pass] Points 1 ==> 2 (1): Check stuff after add :: Award 1 points :: Did not catch exception\n[Rolodex][Info] Running: Check size\n[Rolodex][Pass] Points 2 ==> 2 (0): Check size :: Award 0 points\n[Rolodex][Info] Running: Check that an added entry does exist\n[Rolodex][Pass] Points 2 ==> 2 (0): Check that an added entry does exist :: Award 0 points :: TRUE\n[Rolodex][Info] Running: Check fetch from the Rolodex. Expected <<<1212122 Lane Road\nFullerton, CA, 92831\nUS\n>>> and found <<<1212122 Lane Road\nFullerton, CA, 92831\nUS\n>>>\n[Rolodex][Pass] Points 2 ==> 2 (0): Check fetch from the Rolodex. Expected <<<1212122 Lane Road\nFullerton, CA, 92831\nUS\n>>> and found <<<1212122 Lane Road\nFullerton, CA, 92831\nUS\n>>> :: Award 0 points :: TRUE\n[Rolodex][Info] Running: Check not-equal fetch from the Rolodex. Expected <<<1212121 Lane Way\nFullerton, CA, 92831\nUS\n>>> to be different from <<<1212122 Lane Road\nFullerton, CA, 92831\nUS\n>>>\n[Rolodex][Pass] Points 2 ==> 2 (0): Check not-equal fetch from the Rolodex. Expected <<<1212121 Lane Way\nFullerton, CA, 92831\nUS\n>>> to be different from <<<1212122 Lane Road\nFullerton, CA, 92831\nUS\n>>> :: Award 0 points :: TRUE\n[Rolodex][Info] Running: Removing a valid entry\n[Rolodex][Pass] Points 2 ==> 3 (1): Removing a valid entry :: Award 1 points :: Did not catch exception\n[Rolodex][Info] Running: Check that a deleted entry no longer exists\n[Rolodex][Pass] Points 3 ==> 3 (0): Check that a deleted entry no longer exists :: Award 0 points :: FALSE\n[Rolodex][Info] Running: Delete an entry that doesn't exist from the Rolodex\n[Rolodex][Pass] Points 3 ==> 4 (1): Delete an entry that doesn't exist from the Rolodex :: Award 1 points :: Caught exception :: Cannot remove key because it does not exist: Busey\n[Rolodex][Info] Running: Add duplicates to the Rolodex\n[Rolodex][Pass] Points 4 ==> 5 (1): Add duplicates to the Rolodex :: Award 1 points :: Caught exception :: Cannot add key because it already exists: Harry\n",
         "score": 5
      },
      {
         "max_score": 5,
         "name": "Memory Leaks",
         "output": "[Memory Leaks][Info] Setting fixed points possible to 11\n[Memory Leaks][Info] Running: Memory leaks\n[Memory Leaks][Pass] Points 0 ==> 1 (1): Memory leaks :: Award 1 points :: Did not catch exception\n[Memory Leaks][Info] Running: Checking for memory leaks: No leaks detected\n[Memory Leaks][Pass] Points 1 ==> 11 (10): Checking for memory leaks: No leaks detected :: Award 10 points :: TRUE\n",
         "score": 5
      },
      {
         "max_score": 1,
         "name": "Leaderboard",
         "output": "[Leaderboard][Info] Setting fixed points possible to 1\n[Leaderboard][Info] Running: Extra point for not crashing the Leaderboard test\n[Leaderboard][Pass] Points 0 ==> 1 (1): Extra point for not crashing the Leaderboard test :: Award 1 points :: Did not catch exception\n",
         "score": 1
      }
   ]
}